{{- if eq .Values.events.enabled true -}}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "nrotel.singletonName" . }}
  namespace: {{ .Release.Namespace }}
spec:

  # Mode
  mode: "deployment"

  # Replicas -> SHOULD BE 1 (obviously...)
  replicas: 1

  # Service Account
  serviceAccount: {{ include "nrotel.singletonName" . }}

  # Security context for container priviliges
  {{- with .Values.singleton.securityContext }}
  securityContext: {{ toYaml . | nindent 4 }}
  {{- end }}

  # Annotations for the pods
  podAnnotations:
    prometheus.io/scrape: "false" # This should be false by default. Otherwise 'otelcollector' self scraper job AND 'kubernetes-pods' scrape job will both scrape
  {{- range $key, $val := .Values.singleton.annotations }}
    {{ $key }}: {{ $val }}
  {{- end }}

  # Ports to expose per service
  ports:
    - name: prometheus
      protocol: TCP
      port: {{ .Values.singleton.ports.prometheus.port }}
      targetPort: {{ .Values.singleton.ports.prometheus.targetPort }}

  # Image
  image: "{{ .Values.singleton.image.repository }}:{{ include "nrotel.singletonImageTag" . }}"
  imagePullPolicy: {{ .Values.singleton.image.pullPolicy }}

  # Resources
  resources:
    requests:
      cpu: {{ .Values.singleton.resources.requests.cpu }}
      memory: {{ .Values.singleton.resources.requests.memory }}
    limits:
      cpu: {{ .Values.singleton.resources.limits.cpu }}
      memory: {{ .Values.singleton.resources.limits.memory }}

  # Environment variables
  env:
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  {{- if .Values.global.newrelic.enabled }}
    {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
      {{- if and (ne $teamInfo.ignore true) (eq $teamName "opsteam") }}
    - name: {{ $teamName }}-endpoint
      value: {{ $.Values.global.newrelic.endpoint }}
        {{- if $teamInfo.licenseKey.secretRef }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $teamInfo.licenseKey.secretRef.name }}
          key: {{ $teamInfo.licenseKey.secretRef.key }}
        {{- else if $teamInfo.licenseKey.value }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ include "nrotel.singletonName" $ }}-{{ $teamName }}
          key: licenseKey
        {{- end }}
      {{- end }}
    {{- end }}
  {{- else }}
    {{- range $teamName, $teamInfo := .Values.singleton.newrelic.teams }}
      {{- if and (ne $teamInfo.ignore true) (eq $teamName "opsteam") }}
    - name: {{ $teamName }}-endpoint
      value: {{ $teamInfo.endpoint }}
        {{- if $teamInfo.licenseKey.secretRef }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $teamInfo.licenseKey.secretRef.name }}
          key: {{ $teamInfo.licenseKey.secretRef.key }}
        {{- else if $teamInfo.licenseKey.value }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ include "nrotel.singletonName" $ }}-{{ $teamName }}
          key: licenseKey
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}

  # Otel configuration
  config: |
    receivers:
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otelcollector'
              scrape_interval: {{ .Values.singleton.prometheus.self.scrapeInterval }}
              static_configs:
              - targets:
                - 127.0.0.1:{{ .Values.singleton.ports.prometheus.port }}
              {{- if ne (len .Values.singleton.prometheus.self.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.singleton.prometheus.self.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $1
                  action: keep
              {{- end }}
      k8s_events:

    processors:
      k8sattributes:
        extract:
          metadata:
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.name
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      attributes:
        actions:
          - key: k8s.cluster.name
            value: {{ .Values.clusterName }}
            action: upsert
      attributes/self:
        actions:
          - key: otelcollector.type
            value: singleton
            action: upsert
          - key: k8s.node.name
            value: $MY_NODE_NAME
            action: upsert
          - key: k8s.namespace.name
            value: $MY_NAMESPACE_NAME
            action: upsert
          - key: k8s.pod.name
            value: $MY_POD_NAME
            action: upsert
      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:
    {{- if .Values.global.newrelic.enabled }}
      {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
        {{- if and (ne $teamInfo.ignore true) (eq $teamName "opsteam") }}
      otlphttp/{{ $teamName }}:
        endpoint: ${env:{{ $teamName }}-endpoint}
        tls:
          insecure: false
        headers:
          api-key: ${env:{{ $teamName }}-licenseKey}
        {{- end }}
      {{- end }}
    {{- else }}
      {{- range $teamName, $teamInfo := .Values.singleton.newrelic.teams }}
        {{- if and (ne $teamInfo.ignore true) (eq $teamName "opsteam") }}
      otlphttp/{{ $teamName }}:
        endpoint: ${env:{{ $teamName }}-endpoint}
        tls:
          insecure: false
        headers:
          api-key: ${env:{{ $teamName }}-licenseKey}
        {{- end }}
      {{- end }}
    {{- end }}
      logging:
        verbosity: detailed

    extensions:
      memory_ballast:
        size_in_percentage: 40

    service:
      extensions:
        - memory_ballast
      pipelines:
        metrics/self:
          receivers:
            - prometheus/self
          processors:
            - memory_limiter
            - k8sattributes
            - attributes
            - attributes/self
            - batch
          exporters:
            - otlphttp/opsteam
            # - logging
      {{- if .Values.global.newrelic.enabled }}
        {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
          {{- if and (ne $teamInfo.ignore true) (eq $teamName "opsteam") }}
        logs/{{ $teamName }}:
          receivers:
            - k8s_events
          processors:
            - memory_limiter
            - k8sattributes
            - attributes
            - attributes/self
            - batch
          exporters:
            - otlphttp/{{ $teamName }}
            # - logging
          {{- end }}
        {{- end }}
      {{- else }}
        {{- range $teamName, $teamInfo := .Values.singleton.newrelic.teams }}
          {{- if and (ne $teamInfo.ignore true) (eq $teamName "opsteam") }}
        logs/{{ $teamName }}:
          receivers:
            - k8s_events
          processors:
            - memory_limiter
            - k8sattributes
            - attributes
            - attributes/self
            - batch
          exporters:
            - otlphttp/{{ $teamName }}
            # - logging
          {{- end }}
        {{- end }}
      {{- end }}
      telemetry:
        # logs:
        #   level: DEBUG
        metrics:
          address: 127.0.0.1:{{ .Values.singleton.ports.prometheus.targetPort }}
{{- end -}}
