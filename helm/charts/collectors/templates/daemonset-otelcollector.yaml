{{- if eq .Values.logs.enabled true -}}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "nrotel.daemonsetName" . }}
  namespace: {{ .Release.Namespace }}
spec:

  # Mode
  mode: "daemonset"

  # Service Account
  serviceAccount: {{ include "nrotel.daemonsetName" . }}

  # Security context for container priviliges
  {{- with .Values.daemonset.securityContext }}
  securityContext: {{ toYaml . | nindent 4 }}
  {{- end }}

  # Ports to expose per service
  ports:
    - name: prometheus
      protocol: TCP
      port: {{ .Values.daemonset.ports.prometheus.port }}
      targetPort: {{ .Values.daemonset.ports.prometheus.targetPort }}

  # Image
  image: "{{ .Values.daemonset.image.repository }}:{{ .Values.daemonset.image.tag }}"
  imagePullPolicy: {{ .Values.daemonset.image.pullPolicy }}

  # Resources
  resources:
    requests:
      cpu: {{ .Values.daemonset.resources.requests.cpu }}
      memory: {{ .Values.daemonset.resources.requests.memory }}
    limits:
      cpu: {{ .Values.daemonset.resources.limits.cpu }}
      memory: {{ .Values.daemonset.resources.limits.memory }}

  # Volumes and volume mounts
  volumeMounts:
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
  volumes:
    - name: varlogpods
      hostPath:
        path: /var/log/pods

  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule

  # Environment variables
  env:
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
  {{- if .Values.global.newrelic.enabled }}
    {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
      {{- if ne $teamInfo.ignore true }}
    - name: {{ $teamName }}-endpoint
      value: {{ $.Values.global.newrelic.endpoint }}
        {{- if $teamInfo.licenseKey.secretRef }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $teamInfo.licenseKey.secretRef.name }}
          key: {{ $teamInfo.licenseKey.secretRef.key }}
        {{- else if $teamInfo.licenseKey.value }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ include "nrotel.daemonsetName" $ }}-{{ $teamName }}
          key: licenseKey
        {{- end }}
      {{- end }}
    {{- end }}
  {{- else }}
    {{- range $teamName, $teamInfo := .Values.daemonset.newrelic.teams }}
      {{- if ne $teamInfo.ignore true }}
    - name: {{ $teamName }}-endpoint
      value: {{ $teamInfo.endpoint }}
        {{- if $teamInfo.licenseKey.secretRef }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $teamInfo.licenseKey.secretRef.name }}
          key: {{ $teamInfo.licenseKey.secretRef.key }}
        {{- else if $teamInfo.licenseKey.value }}
    - name: {{ $teamName }}-licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ include "nrotel.daemonsetName" $ }}-{{ $teamName }}
          key: licenseKey
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}

  # Otel configuration
  config: |
    receivers:
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otelcollector'
            {{- if .Values.daemonset.prometheus.lowDataMode }}
              scrape_interval: 60s
            {{- else }}
              scrape_interval: 10s
            {{- end }}
              static_configs:
              - targets:
                - 0.0.0.0:{{ .Values.daemonset.ports.prometheus.port }}
            {{- if .Values.deployment.prometheus.importantMetricsOnly }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: otelcol_exporter_queue_size|otelcol_exporter_queue_capacity|otelcol_processor_dropped_metric_points|otelcol_processor_dropped_spans|otelcol_processor_dropped_log_records|otelcol_exporter_enqueue_failed_metric_points|otelcol_exporter_enqueue_failed_spans|otelcol_exporter_enqueue_failed_log_records|otelcol_receiver_refused_metric_points|otelcol_receiver_refused_spans|otelcol_receiver_refused_log_records|otelcol_exporter_refused_metric_points|otelcol_exporter_refused_spans|otelcol_exporter_refused_log_records
                  replacement: $1
                  action: keep
            {{- end }}
      filelog:
        start_at: end
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: "2006-01-02T15:04:05.000000000-07:00"
            layout_type: gotime
            parse_from: attributes.time
          type: regex_parser
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: json_parser
        - id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        - from: attributes.log
          to: body
          type: move

    processors:
      cumulativetodelta:
      k8sattributes:
        extract:
          metadata:
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.name
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      attributes:
        actions:
          - key: k8s.cluster.name
            value: {{ .Values.clusterName }}
            action: upsert
      attributes/self:
        actions:
          - key: otelcollector.type
            value: daemonset
            action: upsert
          - key: k8s.node.name
            value: $MY_NODE_NAME
            action: upsert
          - key: k8s.namespace.name
            value: $MY_NAMESPACE_NAME
            action: upsert
          - key: k8s.pod.name
            value: $MY_POD_NAME
            action: upsert
      {{- if .Values.global.newrelic.enabled }}
        {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
          {{- if and (ne $teamInfo.ignore true) (ne (len $teamInfo.namespaces) 0) }}
      filter/{{ $teamName }}:
        error_mode: ignore
        logs:
          log_record:
          {{ $conditionForK8sNamespaceName := "" -}}
          {{- range $index, $namespace := $teamInfo.namespaces -}}
            {{- if eq $index 0 -}}
              {{- $conditionForK8sNamespaceName = printf "not IsMatch(resource.attributes[\"k8s.namespace.name\"], \"%s\")" $namespace -}}
            {{ else }}
              {{- $conditionForK8sNamespaceName = printf "%s and not IsMatch(resource.attributes[\"k8s.namespace.name\"], \"%s\")" $conditionForK8sNamespaceName $namespace -}}
            {{- end -}}
          {{- end -}}
            - '{{ $conditionForK8sNamespaceName }}'
          {{- end }}
        {{- end }}
      {{- else }}
        {{- range $teamName, $teamInfo := .Values.daemonset.newrelic.teams }}
          {{- if and (ne $teamInfo.ignore true) (ne (len $teamInfo.namespaces) 0) }}
      filter/{{ $teamName }}:
        error_mode: ignore
        logs:
          log_record:
          {{ $conditionForK8sNamespaceName := "" -}}
          {{- range $index, $namespace := $teamInfo.namespaces -}}
            {{- if eq $index 0 -}}
              {{- $conditionForK8sNamespaceName = printf "not IsMatch(resource.attributes[\"k8s.namespace.name\"], \"%s\")" $namespace -}}
            {{ else }}
              {{- $conditionForK8sNamespaceName = printf "%s and not IsMatch(resource.attributes[\"k8s.namespace.name\"], \"%s\")" $conditionForK8sNamespaceName $namespace -}}
            {{- end -}}
          {{- end -}}
            - '{{ $conditionForK8sNamespaceName }}'
          {{- end }}
        {{- end }}
      {{- end }}
      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:
    {{- if .Values.global.newrelic.enabled }}
      {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
        {{- if ne $teamInfo.ignore true }}
      otlp/{{ $teamName }}:
        endpoint: ${env:{{ $teamName }}-endpoint}
        tls:
          insecure: false
        headers:
          api-key: ${env:{{ $teamName }}-licenseKey}
        {{- end }}
      {{- end }}
    {{- else }}
      {{- range $teamName, $teamInfo := .Values.daemonset.newrelic.teams }}
        {{- if ne $teamInfo.ignore true }}
      otlp/{{ $teamName }}:
        endpoint: ${env:{{ $teamName }}-endpoint}
        tls:
          insecure: false
        headers:
          api-key: ${env:{{ $teamName }}-licenseKey}
        {{- end }}
      {{- end }}
    {{- end }}
      logging:
        verbosity: detailed

    extensions:
      memory_ballast:
        size_in_percentage: 20

    service:
      extensions:
        - memory_ballast
      pipelines:
        metrics/self:
          receivers:
            - prometheus/self
          processors:
            - cumulativetodelta
            - k8sattributes
            - attributes
            - attributes/self
            - memory_limiter
            - batch
          exporters:
            - otlp/opsteam
            # - logging
      {{- if .Values.global.newrelic.enabled }}
        {{- range $teamName, $teamInfo := .Values.global.newrelic.teams }}
          {{- if ne $teamInfo.ignore true }}
        logs/{{ $teamName }}:
          receivers:
            - filelog
          processors:
            - k8sattributes
            - attributes
            - memory_limiter
          {{- if ne (len $teamInfo.namespaces) 0 }}
            - filter/{{ $teamName }}
          {{- end }}
            - batch
          exporters:
            - otlp/{{ $teamName }}
            # - logging
          {{- end }}
        {{- end }}
      {{- else }}
        {{- range $teamName, $teamInfo := .Values.daemonset.newrelic.teams }}
          {{- if ne $teamInfo.ignore true }}
        logs/{{ $teamName }}:
          receivers:
            - filelog
          processors:
            - k8sattributes
            - attributes
            - memory_limiter
          {{- if ne (len $teamInfo.namespaces) 0 }}
            - filter/{{ $teamName }}
          {{- end }}
            - batch
          exporters:
            - otlp/{{ $teamName }}
            # - logging
          {{- end }}
        {{- end }}
      {{- end }}
      telemetry:
        # logs:
        #   level: DEBUG
        metrics:
          address: 0.0.0.0:{{ .Values.daemonset.ports.prometheus.targetPort }}
{{- end -}}
