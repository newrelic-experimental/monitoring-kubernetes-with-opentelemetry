{{- if eq .Values.statefulset.enabled true -}}
{{- $teams := include "statefulsetTeamConfig" . | fromYaml }}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "nrotel.statefulsetName" . }}
  namespace: {{ .Release.Namespace }}
spec:

  # Mode
  mode: "statefulset"

  # Service Account
  serviceAccount: {{ include "nrotel.statefulsetName" . }}

  # Annotations for the pods
  podAnnotations:
    prometheus.io/scrape: "false" # This should be false by default. Otherwise 'otelcollector' self scraper job AND 'kubernetes-pods' scrape job will both scrape
  {{- range $key, $val := .Values.statefulset.annotations }}
    {{ $key }}: {{ $val }}
  {{- end }}

  # Target allocator
  targetAllocator:
    enabled: true
    serviceAccount: {{ include "nrotel.statefulsetName" . }}
    filterStrategy: {{ .Values.statefulset.targetAllocator.filterStrategy }}
    allocationStrategy: {{ .Values.statefulset.targetAllocator.allocationStrategy }}
    prometheusCR:
      enabled: false

  # Security context for container priviliges
  {{- with .Values.statefulset.securityContext }}
  securityContext: {{ toYaml . | nindent 4 }}
  {{- end }}

  # Ports to expose per service
  ports:
    - name: prometheus
      protocol: TCP
      port: {{ .Values.statefulset.ports.prometheus.port }}
      targetPort: {{ .Values.statefulset.ports.prometheus.targetPort }}

  # Image
  image: "{{ .Values.statefulset.image.repository }}:{{ include "nrotel.statefulsetImageTag" . }}"
  imagePullPolicy: {{ .Values.statefulset.image.pullPolicy }}

  # Resources
  resources:
    requests:
      cpu: {{ .Values.statefulset.resources.requests.cpu }}
      memory: {{ .Values.statefulset.resources.requests.memory }}
    limits:
      cpu: {{ .Values.statefulset.resources.limits.cpu }}
      memory: {{ .Values.statefulset.resources.limits.memory }}

  # Replicas
  replicas: {{ .Values.statefulset.replicas }}

  # Autoscaling configuration
  {{- if eq .Values.statefulset.autoscaler.enabled true }}
  autoscaler:
    minReplicas: {{ .Values.statefulset.autoscaler.minReplicas }}
    maxReplicas: {{ .Values.statefulset.autoscaler.maxReplicas }}
    targetCPUUtilization: {{ .Values.statefulset.autoscaler.targetCPUUtilization }}
    targetMemoryUtilization: {{ .Values.statefulset.autoscaler.targetMemoryUtilization }}
  {{- end }}

  # Environment variables
  env:
    - name: MY_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    {{- range $teamName, $teamInfo := $teams }}
      {{- if ne $teamInfo.ignore true }}
    - name: {{ $teamName }}_endpoint
      value: {{ $teamInfo.endpoint }}
        {{- if $teamInfo.licenseKey.secretRef }}
    - name: {{ $teamName }}_licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ $teamInfo.licenseKey.secretRef.name }}
          key: {{ $teamInfo.licenseKey.secretRef.key }}
        {{- else if $teamInfo.licenseKey.value }}
    - name: {{ $teamName }}_licenseKey
      valueFrom:
        secretKeyRef:
          name: {{ include "nrotel.statefulsetName" $ }}-{{ $teamName }}
          key: licenseKey
        {{- end }}
      {{- end }}
    {{- end }}

  # Otel configuration
  config:
    receivers:
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otelcollector'
              scrape_interval: {{ .Values.statefulset.prometheus.self.scrapeInterval }}
              static_configs:
              - targets:
                - 127.0.0.1:{{ .Values.statefulset.ports.prometheus.port }}
              {{- if ne (len .Values.statefulset.prometheus.self.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.self.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}
      prometheus:
        config:
          scrape_configs:
            - job_name: 'kubernetes-apiservers'
              scrape_interval: {{ .Values.statefulset.prometheus.kubeApiServer.scrapeInterval }}

              kubernetes_sd_configs:
                - role: endpoints
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              relabel_configs:
                - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                  action: keep
                  regex: default;kubernetes;https

              {{- if ne (len .Values.statefulset.prometheus.kubeApiServer.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.kubeApiServer.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}

            - job_name: 'kubernetes-nodes'
              scrape_interval: {{ .Values.statefulset.prometheus.nodes.scrapeInterval }}
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
                - role: node

              relabel_configs:
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: /api/v1/nodes/$$1/proxy/metrics

            - job_name: 'kubernetes-nodes-cadvisor'
              scrape_interval: {{ .Values.statefulset.prometheus.cAdvisor.scrapeInterval }}
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

              kubernetes_sd_configs:
                - role: node

              relabel_configs:
                - target_label: __address__
                  replacement: kubernetes.default.svc:443
                - source_labels: [__meta_kubernetes_node_name]
                  regex: (.+)
                  target_label: __metrics_path__
                  replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor

              {{- if ne (len .Values.statefulset.prometheus.cAdvisor.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.cAdvisor.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}

            - job_name: 'kubernetes-coredns'
              scrape_interval: {{ .Values.statefulset.prometheus.coreDns.scrapeInterval }}
              honor_labels: true

              kubernetes_sd_configs:
                - role: endpoints

              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  target_label: __address__
                  regex: (.+?)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                - source_labels: [__meta_kubernetes_service_name]
                  action: keep
                  regex: kube-dns
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node

              {{- if ne (len .Values.statefulset.prometheus.coreDns.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.coreDns.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}

            - job_name: 'kubernetes-node-exporter'
              scrape_interval: {{ .Values.statefulset.prometheus.nodeExporter.scrapeInterval }}
              honor_labels: true

              kubernetes_sd_configs:
                - role: endpoints

              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  target_label: __address__
                  regex: (.+?)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                - source_labels: [__meta_kubernetes_service_name]
                  action: keep
                  regex: {{ include "nrotel.nodeExporterServiceName" . }}
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node

              {{- if ne (len .Values.statefulset.prometheus.nodeExporter.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.nodeExporter.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}

            - job_name: 'kubernetes-kube-state-metrics'
              scrape_interval: {{ .Values.statefulset.prometheus.kubeStateMetrics.scrapeInterval }}
              honor_labels: true

              kubernetes_sd_configs:
                - role: endpoints

              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  target_label: __address__
                  regex: (.+?)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                - source_labels: [__meta_kubernetes_service_name]
                  action: keep
                  regex: {{ include "nrotel.kubeStateMetricsServiceName" . }}
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node

              {{- if ne (len .Values.statefulset.prometheus.kubeStateMetrics.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.kubeStateMetrics.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}

            {{- if .Values.statefulset.prometheus.serviceEndpoints.scrape }}
            - job_name: 'kubernetes-service-endpoints'
              scrape_interval: {{ .Values.statefulset.prometheus.serviceEndpoints.scrapeInterval }}
              honor_labels: true

              kubernetes_sd_configs:
                - role: endpoints

              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  target_label: __address__
                  regex: (.+?)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                - source_labels: [__meta_kubernetes_service_name]
                  action: drop
                  regex: kube-dns
                - source_labels: [__meta_kubernetes_service_name]
                  action: drop
                  regex: {{ include "nrotel.nodeExporterServiceName" . }}
                - source_labels: [__meta_kubernetes_service_name]
                  action: drop
                  regex: {{ include "nrotel.kubeStateMetricsServiceName" . }}
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node

              {{- if ne (len .Values.statefulset.prometheus.serviceEndpoints.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.serviceEndpoints.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}
            {{- end }}

            - job_name: 'oteltargetallocators'
              scrape_interval: {{ .Values.statefulset.prometheus.targetAllocator.scrapeInterval }}
              honor_labels: true

              kubernetes_sd_configs:
                - role: endpoints

              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                  action: drop
                  regex: true
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  target_label: __address__
                  regex: (.+?)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                - source_labels: [__meta_kubernetes_service_name]
                  action: keep
                  regex: {{ include "nrotel.targetAllocatorName" . }}
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node

              {{- if ne (len .Values.statefulset.prometheus.targetAllocator.importantMetrics) 0 }}
                {{ $metrics := "" -}}
                {{- range $index, $metric := .Values.statefulset.prometheus.targetAllocator.importantMetrics -}}
                  {{- if eq $index 0 -}}
                    {{- $metrics = printf "%s" $metric -}}
                  {{ else }}
                    {{- $metrics = printf "%s|%s" $metrics $metric -}}
                  {{- end -}}
                {{- end }}
              metric_relabel_configs:
                - source_labels: [__name__]
                  separator: ;
                  regex: {{ $metrics }}
                  replacement: $$1
                  action: keep
              {{- end }}

            {{ range $index, $job := .Values.statefulset.prometheus.extraScrapeJobs -}}
            - {{ toYaml $job | indent 14 | trim }}
            {{ end }}

    processors:

      resourcedetection:
        detectors: [env, azure]
        azure:
          resource_attributes:
            cloud.provider:
              enabled: true
            cloud.platform:
              enabled: false
            cloud.region:
              enabled: true
            cloud.account.id:
              enabled: false
            host.id:
              enabled: false
            host.name:
              enabled: false
            azure.vm.name:
              enabled: false
            azure.vm.size:
              enabled: true
            azure.vm.scaleset.name:
              enabled: false
            azure.resourcegroup.name:
              enabled: false

      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time

          {{- with .Values.statefulset.processors.k8sattributes.labels }}
          labels: {{ toYaml . | nindent 12 }}
          {{- end }}

          {{- with .Values.statefulset.processors.k8sattributes.annotations }}
          annotations: {{ toYaml . | nindent 12 }}
          {{- end }}

        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

      attributes:
        actions:
          - key: k8s.cluster.name
            value: {{ .Values.clusterName }}
            action: upsert

      resource:
        attributes:
          - key: vm.type
            action: upsert
            from_attribute: azure.vm.size
          - key: azure.vm.size
            action: delete

      attributes/self:
        actions:
          - key: otelcollector.type
            value: statefulset
            action: upsert
          - key: k8s.node.name
            value: $MY_NODE_NAME
            action: upsert
          - key: k8s.namespace.name
            value: $MY_NAMESPACE_NAME
            action: upsert
          - key: k8s.pod.name
            value: $MY_POD_NAME
            action: upsert

      {{- range $teamName, $teamInfo := $teams }}
        {{- if and (ne $teamInfo.ignore true) (ne (len $teamInfo.namespaces) 0) }}
      filter/{{ $teamName }}:
        error_mode: ignore
        metrics:
          datapoint:
            - {{ $teamInfo.filter }}
        {{- end }}
      {{- end }}

      memory_limiter:
         check_interval: 1s
         limit_percentage: 80
         spike_limit_percentage: 25

      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

    exporters:

      {{- range $teamName, $teamInfo := $teams }}
        {{- if ne $teamInfo.ignore true }}
      otlphttp/{{ $teamName }}:
        endpoint: ${{ $teamName }}_endpoint
        tls:
          insecure: false
        headers:
          api-key: ${{ $teamName }}_licenseKey
        {{- end }}
      {{- end }}

      logging:
        verbosity: detailed

    extensions:
      memory_ballast:
        size_in_percentage: {{ .Values.statefulset.extensions.memory_ballast.size_in_percentage }}

    service:

      extensions:
        - memory_ballast

      pipelines:

        metrics/self:
          receivers:
            - prometheus/self

          processors:
            - memory_limiter
            - resourcedetection
            - k8sattributes
            - attributes
            - resource
            - attributes/self
            - batch

          exporters:
            - otlphttp/opsteam
            # - logging

        {{- range $teamName, $teamInfo := $teams }}
          {{- if ne $teamInfo.ignore true }}
        metrics/{{ $teamName }}:
          receivers:
            - prometheus
          processors:
            - memory_limiter
            - resourcedetection
            - k8sattributes
            - attributes
            - resource
          {{- if ne (len $teamInfo.namespaces) 0 }}
            - filter/{{ $teamName }}
          {{- end }}
            - batch
          exporters:
            - otlphttp/{{ $teamName }}
            # - logging
          {{- end }}
        {{- end }}

      telemetry:
        # logs:
        #   level: DEBUG
        metrics:
          address: 127.0.0.1:{{ .Values.statefulset.ports.prometheus.targetPort }}
{{- end -}}
